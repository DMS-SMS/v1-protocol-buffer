// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth-student.proto

package authproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthStudent service

type AuthStudentService interface {
	LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, opts ...client.CallOption) (*LoginStudentAuthResponse, error)
	ChangeStudentAuthPw(ctx context.Context, in *ChangeStudentAuthPwRequest, opts ...client.CallOption) (*ChangeStudentAuthPwResponse, error)
	GetStudentUserInform(ctx context.Context, in *GetStudentUserInformRequest, opts ...client.CallOption) (*GetStudentUserInformResponse, error)
}

type authStudentService struct {
	c    client.Client
	name string
}

func NewAuthStudentService(name string, c client.Client) AuthStudentService {
	return &authStudentService{
		c:    c,
		name: name,
	}
}

func (c *authStudentService) LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, opts ...client.CallOption) (*LoginStudentAuthResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.LoginStudentAuth", in)
	out := new(LoginStudentAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) ChangeStudentAuthPw(ctx context.Context, in *ChangeStudentAuthPwRequest, opts ...client.CallOption) (*ChangeStudentAuthPwResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.ChangeStudentAuthPw", in)
	out := new(ChangeStudentAuthPwResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) GetStudentUserInform(ctx context.Context, in *GetStudentUserInformRequest, opts ...client.CallOption) (*GetStudentUserInformResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.GetStudentUserInform", in)
	out := new(GetStudentUserInformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthStudent service

type AuthStudentHandler interface {
	LoginStudentAuth(context.Context, *LoginStudentAuthRequest, *LoginStudentAuthResponse) error
	ChangeStudentAuthPw(context.Context, *ChangeStudentAuthPwRequest, *ChangeStudentAuthPwResponse) error
	GetStudentUserInform(context.Context, *GetStudentUserInformRequest, *GetStudentUserInformResponse) error
}

func RegisterAuthStudentHandler(s server.Server, hdlr AuthStudentHandler, opts ...server.HandlerOption) error {
	type authStudent interface {
		LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, out *LoginStudentAuthResponse) error
		ChangeStudentAuthPw(ctx context.Context, in *ChangeStudentAuthPwRequest, out *ChangeStudentAuthPwResponse) error
		GetStudentUserInform(ctx context.Context, in *GetStudentUserInformRequest, out *GetStudentUserInformResponse) error
	}
	type AuthStudent struct {
		authStudent
	}
	h := &authStudentHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthStudent{h}, opts...))
}

type authStudentHandler struct {
	AuthStudentHandler
}

func (h *authStudentHandler) LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, out *LoginStudentAuthResponse) error {
	return h.AuthStudentHandler.LoginStudentAuth(ctx, in, out)
}

func (h *authStudentHandler) ChangeStudentAuthPw(ctx context.Context, in *ChangeStudentAuthPwRequest, out *ChangeStudentAuthPwResponse) error {
	return h.AuthStudentHandler.ChangeStudentAuthPw(ctx, in, out)
}

func (h *authStudentHandler) GetStudentUserInform(ctx context.Context, in *GetStudentUserInformRequest, out *GetStudentUserInformResponse) error {
	return h.AuthStudentHandler.GetStudentUserInform(ctx, in, out)
}
