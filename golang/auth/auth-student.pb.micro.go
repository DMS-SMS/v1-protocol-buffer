// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth-student.proto

package authproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthStudent service

type AuthStudentService interface {
	LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, opts ...client.CallOption) (*LoginStudentAuthResponse, error)
	ChangeStudentPW(ctx context.Context, in *ChangeStudentPWRequest, opts ...client.CallOption) (*ChangeStudentPWResponse, error)
	GetStudentInformWithUUID(ctx context.Context, in *GetStudentInformWithUUIDRequest, opts ...client.CallOption) (*GetStudentInformWithUUIDResponse, error)
	GetStudentInformsWithUUIDs(ctx context.Context, in *GetStudentInformsWithUUIDsRequest, opts ...client.CallOption) (*GetStudentInformsWithUUIDsResponse, error)
	GetStudentUUIDsWithInform(ctx context.Context, in *GetStudentUUIDsWithInformRequest, opts ...client.CallOption) (*GetStudentUUIDsWithInformResponse, error)
	GetParentWithStudentUUID(ctx context.Context, in *GetParentWithStudentUUIDRequest, opts ...client.CallOption) (*GetParentWithStudentUUIDResponse, error)
	GetUnsignedStudentWithAuthCode(ctx context.Context, in *GetUnsignedStudentWithAuthCodeRequest, opts ...client.CallOption) (*GetUnsignedStudentWithAuthCodeResponse, error)
}

type authStudentService struct {
	c    client.Client
	name string
}

func NewAuthStudentService(name string, c client.Client) AuthStudentService {
	return &authStudentService{
		c:    c,
		name: name,
	}
}

func (c *authStudentService) LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, opts ...client.CallOption) (*LoginStudentAuthResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.LoginStudentAuth", in)
	out := new(LoginStudentAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) ChangeStudentPW(ctx context.Context, in *ChangeStudentPWRequest, opts ...client.CallOption) (*ChangeStudentPWResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.ChangeStudentPW", in)
	out := new(ChangeStudentPWResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) GetStudentInformWithUUID(ctx context.Context, in *GetStudentInformWithUUIDRequest, opts ...client.CallOption) (*GetStudentInformWithUUIDResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.GetStudentInformWithUUID", in)
	out := new(GetStudentInformWithUUIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) GetStudentInformsWithUUIDs(ctx context.Context, in *GetStudentInformsWithUUIDsRequest, opts ...client.CallOption) (*GetStudentInformsWithUUIDsResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.GetStudentInformsWithUUIDs", in)
	out := new(GetStudentInformsWithUUIDsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) GetStudentUUIDsWithInform(ctx context.Context, in *GetStudentUUIDsWithInformRequest, opts ...client.CallOption) (*GetStudentUUIDsWithInformResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.GetStudentUUIDsWithInform", in)
	out := new(GetStudentUUIDsWithInformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) GetParentWithStudentUUID(ctx context.Context, in *GetParentWithStudentUUIDRequest, opts ...client.CallOption) (*GetParentWithStudentUUIDResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.GetParentWithStudentUUID", in)
	out := new(GetParentWithStudentUUIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authStudentService) GetUnsignedStudentWithAuthCode(ctx context.Context, in *GetUnsignedStudentWithAuthCodeRequest, opts ...client.CallOption) (*GetUnsignedStudentWithAuthCodeResponse, error) {
	req := c.c.NewRequest(c.name, "AuthStudent.GetUnsignedStudentWithAuthCode", in)
	out := new(GetUnsignedStudentWithAuthCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthStudent service

type AuthStudentHandler interface {
	LoginStudentAuth(context.Context, *LoginStudentAuthRequest, *LoginStudentAuthResponse) error
	ChangeStudentPW(context.Context, *ChangeStudentPWRequest, *ChangeStudentPWResponse) error
	GetStudentInformWithUUID(context.Context, *GetStudentInformWithUUIDRequest, *GetStudentInformWithUUIDResponse) error
	GetStudentInformsWithUUIDs(context.Context, *GetStudentInformsWithUUIDsRequest, *GetStudentInformsWithUUIDsResponse) error
	GetStudentUUIDsWithInform(context.Context, *GetStudentUUIDsWithInformRequest, *GetStudentUUIDsWithInformResponse) error
	GetParentWithStudentUUID(context.Context, *GetParentWithStudentUUIDRequest, *GetParentWithStudentUUIDResponse) error
	GetUnsignedStudentWithAuthCode(context.Context, *GetUnsignedStudentWithAuthCodeRequest, *GetUnsignedStudentWithAuthCodeResponse) error
}

func RegisterAuthStudentHandler(s server.Server, hdlr AuthStudentHandler, opts ...server.HandlerOption) error {
	type authStudent interface {
		LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, out *LoginStudentAuthResponse) error
		ChangeStudentPW(ctx context.Context, in *ChangeStudentPWRequest, out *ChangeStudentPWResponse) error
		GetStudentInformWithUUID(ctx context.Context, in *GetStudentInformWithUUIDRequest, out *GetStudentInformWithUUIDResponse) error
		GetStudentInformsWithUUIDs(ctx context.Context, in *GetStudentInformsWithUUIDsRequest, out *GetStudentInformsWithUUIDsResponse) error
		GetStudentUUIDsWithInform(ctx context.Context, in *GetStudentUUIDsWithInformRequest, out *GetStudentUUIDsWithInformResponse) error
		GetParentWithStudentUUID(ctx context.Context, in *GetParentWithStudentUUIDRequest, out *GetParentWithStudentUUIDResponse) error
		GetUnsignedStudentWithAuthCode(ctx context.Context, in *GetUnsignedStudentWithAuthCodeRequest, out *GetUnsignedStudentWithAuthCodeResponse) error
	}
	type AuthStudent struct {
		authStudent
	}
	h := &authStudentHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthStudent{h}, opts...))
}

type authStudentHandler struct {
	AuthStudentHandler
}

func (h *authStudentHandler) LoginStudentAuth(ctx context.Context, in *LoginStudentAuthRequest, out *LoginStudentAuthResponse) error {
	return h.AuthStudentHandler.LoginStudentAuth(ctx, in, out)
}

func (h *authStudentHandler) ChangeStudentPW(ctx context.Context, in *ChangeStudentPWRequest, out *ChangeStudentPWResponse) error {
	return h.AuthStudentHandler.ChangeStudentPW(ctx, in, out)
}

func (h *authStudentHandler) GetStudentInformWithUUID(ctx context.Context, in *GetStudentInformWithUUIDRequest, out *GetStudentInformWithUUIDResponse) error {
	return h.AuthStudentHandler.GetStudentInformWithUUID(ctx, in, out)
}

func (h *authStudentHandler) GetStudentInformsWithUUIDs(ctx context.Context, in *GetStudentInformsWithUUIDsRequest, out *GetStudentInformsWithUUIDsResponse) error {
	return h.AuthStudentHandler.GetStudentInformsWithUUIDs(ctx, in, out)
}

func (h *authStudentHandler) GetStudentUUIDsWithInform(ctx context.Context, in *GetStudentUUIDsWithInformRequest, out *GetStudentUUIDsWithInformResponse) error {
	return h.AuthStudentHandler.GetStudentUUIDsWithInform(ctx, in, out)
}

func (h *authStudentHandler) GetParentWithStudentUUID(ctx context.Context, in *GetParentWithStudentUUIDRequest, out *GetParentWithStudentUUIDResponse) error {
	return h.AuthStudentHandler.GetParentWithStudentUUID(ctx, in, out)
}

func (h *authStudentHandler) GetUnsignedStudentWithAuthCode(ctx context.Context, in *GetUnsignedStudentWithAuthCodeRequest, out *GetUnsignedStudentWithAuthCodeResponse) error {
	return h.AuthStudentHandler.GetUnsignedStudentWithAuthCode(ctx, in, out)
}
