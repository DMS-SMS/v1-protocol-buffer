// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth-parent.proto

package authproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthParent service

type AuthParentService interface {
	LoginParentAuth(ctx context.Context, in *LoginParentAuthRequest, opts ...client.CallOption) (*LoginParentAuthResponse, error)
	ChangeParentPW(ctx context.Context, in *ChangeParentPWRequest, opts ...client.CallOption) (*ChangeParentPWResponse, error)
	GetParentInformWithUUID(ctx context.Context, in *GetParentInformWithUUIDRequest, opts ...client.CallOption) (*GetParentInformWithUUIDResponse, error)
}

type authParentService struct {
	c    client.Client
	name string
}

func NewAuthParentService(name string, c client.Client) AuthParentService {
	return &authParentService{
		c:    c,
		name: name,
	}
}

func (c *authParentService) LoginParentAuth(ctx context.Context, in *LoginParentAuthRequest, opts ...client.CallOption) (*LoginParentAuthResponse, error) {
	req := c.c.NewRequest(c.name, "AuthParent.LoginParentAuth", in)
	out := new(LoginParentAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authParentService) ChangeParentPW(ctx context.Context, in *ChangeParentPWRequest, opts ...client.CallOption) (*ChangeParentPWResponse, error) {
	req := c.c.NewRequest(c.name, "AuthParent.ChangeParentPW", in)
	out := new(ChangeParentPWResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authParentService) GetParentInformWithUUID(ctx context.Context, in *GetParentInformWithUUIDRequest, opts ...client.CallOption) (*GetParentInformWithUUIDResponse, error) {
	req := c.c.NewRequest(c.name, "AuthParent.GetParentInformWithUUID", in)
	out := new(GetParentInformWithUUIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthParent service

type AuthParentHandler interface {
	LoginParentAuth(context.Context, *LoginParentAuthRequest, *LoginParentAuthResponse) error
	ChangeParentPW(context.Context, *ChangeParentPWRequest, *ChangeParentPWResponse) error
	GetParentInformWithUUID(context.Context, *GetParentInformWithUUIDRequest, *GetParentInformWithUUIDResponse) error
}

func RegisterAuthParentHandler(s server.Server, hdlr AuthParentHandler, opts ...server.HandlerOption) error {
	type authParent interface {
		LoginParentAuth(ctx context.Context, in *LoginParentAuthRequest, out *LoginParentAuthResponse) error
		ChangeParentPW(ctx context.Context, in *ChangeParentPWRequest, out *ChangeParentPWResponse) error
		GetParentInformWithUUID(ctx context.Context, in *GetParentInformWithUUIDRequest, out *GetParentInformWithUUIDResponse) error
	}
	type AuthParent struct {
		authParent
	}
	h := &authParentHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthParent{h}, opts...))
}

type authParentHandler struct {
	AuthParentHandler
}

func (h *authParentHandler) LoginParentAuth(ctx context.Context, in *LoginParentAuthRequest, out *LoginParentAuthResponse) error {
	return h.AuthParentHandler.LoginParentAuth(ctx, in, out)
}

func (h *authParentHandler) ChangeParentPW(ctx context.Context, in *ChangeParentPWRequest, out *ChangeParentPWResponse) error {
	return h.AuthParentHandler.ChangeParentPW(ctx, in, out)
}

func (h *authParentHandler) GetParentInformWithUUID(ctx context.Context, in *GetParentInformWithUUIDRequest, out *GetParentInformWithUUIDResponse) error {
	return h.AuthParentHandler.GetParentInformWithUUID(ctx, in, out)
}
