// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: outing-teacher.proto

package outingproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OutingTeacher service

type OutingTeacherService interface {
	GetOutingWithFilter(ctx context.Context, in *GetOutingWithFilterRequest, opts ...client.CallOption) (*OutingResponse, error)
	ApproveOuting(ctx context.Context, in *ConfirmOutingRequest, opts ...client.CallOption) (*ConfirmOutingResponse, error)
	RejectOuting(ctx context.Context, in *ConfirmOutingRequest, opts ...client.CallOption) (*ConfirmOutingResponse, error)
	CertifyOuting(ctx context.Context, in *ConfirmOutingRequest, opts ...client.CallOption) (*ConfirmOutingResponse, error)
}

type outingTeacherService struct {
	c    client.Client
	name string
}

func NewOutingTeacherService(name string, c client.Client) OutingTeacherService {
	return &outingTeacherService{
		c:    c,
		name: name,
	}
}

func (c *outingTeacherService) GetOutingWithFilter(ctx context.Context, in *GetOutingWithFilterRequest, opts ...client.CallOption) (*OutingResponse, error) {
	req := c.c.NewRequest(c.name, "OutingTeacher.GetOutingWithFilter", in)
	out := new(OutingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingTeacherService) ApproveOuting(ctx context.Context, in *ConfirmOutingRequest, opts ...client.CallOption) (*ConfirmOutingResponse, error) {
	req := c.c.NewRequest(c.name, "OutingTeacher.ApproveOuting", in)
	out := new(ConfirmOutingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingTeacherService) RejectOuting(ctx context.Context, in *ConfirmOutingRequest, opts ...client.CallOption) (*ConfirmOutingResponse, error) {
	req := c.c.NewRequest(c.name, "OutingTeacher.RejectOuting", in)
	out := new(ConfirmOutingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingTeacherService) CertifyOuting(ctx context.Context, in *ConfirmOutingRequest, opts ...client.CallOption) (*ConfirmOutingResponse, error) {
	req := c.c.NewRequest(c.name, "OutingTeacher.CertifyOuting", in)
	out := new(ConfirmOutingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OutingTeacher service

type OutingTeacherHandler interface {
	GetOutingWithFilter(context.Context, *GetOutingWithFilterRequest, *OutingResponse) error
	ApproveOuting(context.Context, *ConfirmOutingRequest, *ConfirmOutingResponse) error
	RejectOuting(context.Context, *ConfirmOutingRequest, *ConfirmOutingResponse) error
	CertifyOuting(context.Context, *ConfirmOutingRequest, *ConfirmOutingResponse) error
}

func RegisterOutingTeacherHandler(s server.Server, hdlr OutingTeacherHandler, opts ...server.HandlerOption) error {
	type outingTeacher interface {
		GetOutingWithFilter(ctx context.Context, in *GetOutingWithFilterRequest, out *OutingResponse) error
		ApproveOuting(ctx context.Context, in *ConfirmOutingRequest, out *ConfirmOutingResponse) error
		RejectOuting(ctx context.Context, in *ConfirmOutingRequest, out *ConfirmOutingResponse) error
		CertifyOuting(ctx context.Context, in *ConfirmOutingRequest, out *ConfirmOutingResponse) error
	}
	type OutingTeacher struct {
		outingTeacher
	}
	h := &outingTeacherHandler{hdlr}
	return s.Handle(s.NewHandler(&OutingTeacher{h}, opts...))
}

type outingTeacherHandler struct {
	OutingTeacherHandler
}

func (h *outingTeacherHandler) GetOutingWithFilter(ctx context.Context, in *GetOutingWithFilterRequest, out *OutingResponse) error {
	return h.OutingTeacherHandler.GetOutingWithFilter(ctx, in, out)
}

func (h *outingTeacherHandler) ApproveOuting(ctx context.Context, in *ConfirmOutingRequest, out *ConfirmOutingResponse) error {
	return h.OutingTeacherHandler.ApproveOuting(ctx, in, out)
}

func (h *outingTeacherHandler) RejectOuting(ctx context.Context, in *ConfirmOutingRequest, out *ConfirmOutingResponse) error {
	return h.OutingTeacherHandler.RejectOuting(ctx, in, out)
}

func (h *outingTeacherHandler) CertifyOuting(ctx context.Context, in *ConfirmOutingRequest, out *ConfirmOutingResponse) error {
	return h.OutingTeacherHandler.CertifyOuting(ctx, in, out)
}
