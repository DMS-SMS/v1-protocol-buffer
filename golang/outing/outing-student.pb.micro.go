// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: outing-student.proto

package outingproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OutingStudent service

type OutingStudentService interface {
	CreateOuting(ctx context.Context, in *CreateOutingRequest, opts ...client.CallOption) (*CreateOutingResponse, error)
	GetStudentOutings(ctx context.Context, in *GetStudentOutingsRequest, opts ...client.CallOption) (*GetStudentOutingsResponse, error)
	GetOutingInform(ctx context.Context, in *GetOutingInformRequest, opts ...client.CallOption) (*GetOutingInformResponse, error)
	GetCardAboutOuting(ctx context.Context, in *GetCardAboutOutingRequest, opts ...client.CallOption) (*GetCardAboutOutingResponse, error)
	StartGoOut(ctx context.Context, in *GoOutRequest, opts ...client.CallOption) (*GoOutResponse, error)
	FinishGoOut(ctx context.Context, in *GoOutRequest, opts ...client.CallOption) (*GoOutResponse, error)
}

type outingStudentService struct {
	c    client.Client
	name string
}

func NewOutingStudentService(name string, c client.Client) OutingStudentService {
	return &outingStudentService{
		c:    c,
		name: name,
	}
}

func (c *outingStudentService) CreateOuting(ctx context.Context, in *CreateOutingRequest, opts ...client.CallOption) (*CreateOutingResponse, error) {
	req := c.c.NewRequest(c.name, "OutingStudent.CreateOuting", in)
	out := new(CreateOutingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingStudentService) GetStudentOutings(ctx context.Context, in *GetStudentOutingsRequest, opts ...client.CallOption) (*GetStudentOutingsResponse, error) {
	req := c.c.NewRequest(c.name, "OutingStudent.GetStudentOutings", in)
	out := new(GetStudentOutingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingStudentService) GetOutingInform(ctx context.Context, in *GetOutingInformRequest, opts ...client.CallOption) (*GetOutingInformResponse, error) {
	req := c.c.NewRequest(c.name, "OutingStudent.GetOutingInform", in)
	out := new(GetOutingInformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingStudentService) GetCardAboutOuting(ctx context.Context, in *GetCardAboutOutingRequest, opts ...client.CallOption) (*GetCardAboutOutingResponse, error) {
	req := c.c.NewRequest(c.name, "OutingStudent.GetCardAboutOuting", in)
	out := new(GetCardAboutOutingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingStudentService) StartGoOut(ctx context.Context, in *GoOutRequest, opts ...client.CallOption) (*GoOutResponse, error) {
	req := c.c.NewRequest(c.name, "OutingStudent.StartGoOut", in)
	out := new(GoOutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outingStudentService) FinishGoOut(ctx context.Context, in *GoOutRequest, opts ...client.CallOption) (*GoOutResponse, error) {
	req := c.c.NewRequest(c.name, "OutingStudent.FinishGoOut", in)
	out := new(GoOutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OutingStudent service

type OutingStudentHandler interface {
	CreateOuting(context.Context, *CreateOutingRequest, *CreateOutingResponse) error
	GetStudentOutings(context.Context, *GetStudentOutingsRequest, *GetStudentOutingsResponse) error
	GetOutingInform(context.Context, *GetOutingInformRequest, *GetOutingInformResponse) error
	GetCardAboutOuting(context.Context, *GetCardAboutOutingRequest, *GetCardAboutOutingResponse) error
	StartGoOut(context.Context, *GoOutRequest, *GoOutResponse) error
	FinishGoOut(context.Context, *GoOutRequest, *GoOutResponse) error
}

func RegisterOutingStudentHandler(s server.Server, hdlr OutingStudentHandler, opts ...server.HandlerOption) error {
	type outingStudent interface {
		CreateOuting(ctx context.Context, in *CreateOutingRequest, out *CreateOutingResponse) error
		GetStudentOutings(ctx context.Context, in *GetStudentOutingsRequest, out *GetStudentOutingsResponse) error
		GetOutingInform(ctx context.Context, in *GetOutingInformRequest, out *GetOutingInformResponse) error
		GetCardAboutOuting(ctx context.Context, in *GetCardAboutOutingRequest, out *GetCardAboutOutingResponse) error
		StartGoOut(ctx context.Context, in *GoOutRequest, out *GoOutResponse) error
		FinishGoOut(ctx context.Context, in *GoOutRequest, out *GoOutResponse) error
	}
	type OutingStudent struct {
		outingStudent
	}
	h := &outingStudentHandler{hdlr}
	return s.Handle(s.NewHandler(&OutingStudent{h}, opts...))
}

type outingStudentHandler struct {
	OutingStudentHandler
}

func (h *outingStudentHandler) CreateOuting(ctx context.Context, in *CreateOutingRequest, out *CreateOutingResponse) error {
	return h.OutingStudentHandler.CreateOuting(ctx, in, out)
}

func (h *outingStudentHandler) GetStudentOutings(ctx context.Context, in *GetStudentOutingsRequest, out *GetStudentOutingsResponse) error {
	return h.OutingStudentHandler.GetStudentOutings(ctx, in, out)
}

func (h *outingStudentHandler) GetOutingInform(ctx context.Context, in *GetOutingInformRequest, out *GetOutingInformResponse) error {
	return h.OutingStudentHandler.GetOutingInform(ctx, in, out)
}

func (h *outingStudentHandler) GetCardAboutOuting(ctx context.Context, in *GetCardAboutOutingRequest, out *GetCardAboutOutingResponse) error {
	return h.OutingStudentHandler.GetCardAboutOuting(ctx, in, out)
}

func (h *outingStudentHandler) StartGoOut(ctx context.Context, in *GoOutRequest, out *GoOutResponse) error {
	return h.OutingStudentHandler.StartGoOut(ctx, in, out)
}

func (h *outingStudentHandler) FinishGoOut(ctx context.Context, in *GoOutRequest, out *GoOutResponse) error {
	return h.OutingStudentHandler.FinishGoOut(ctx, in, out)
}
