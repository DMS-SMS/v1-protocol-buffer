// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: club-event.proto

package clubproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ClubEvent service

type ClubEventService interface {
	ChangeAllServiceNodes(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
}

type clubEventService struct {
	c    client.Client
	name string
}

func NewClubEventService(name string, c client.Client) ClubEventService {
	return &clubEventService{
		c:    c,
		name: name,
	}
}

func (c *clubEventService) ChangeAllServiceNodes(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "ClubEvent.ChangeAllServiceNodes", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClubEvent service

type ClubEventHandler interface {
	ChangeAllServiceNodes(context.Context, *Empty, *Empty) error
}

func RegisterClubEventHandler(s server.Server, hdlr ClubEventHandler, opts ...server.HandlerOption) error {
	type clubEvent interface {
		ChangeAllServiceNodes(ctx context.Context, in *Empty, out *Empty) error
	}
	type ClubEvent struct {
		clubEvent
	}
	h := &clubEventHandler{hdlr}
	return s.Handle(s.NewHandler(&ClubEvent{h}, opts...))
}

type clubEventHandler struct {
	ClubEventHandler
}

func (h *clubEventHandler) ChangeAllServiceNodes(ctx context.Context, in *Empty, out *Empty) error {
	return h.ClubEventHandler.ChangeAllServiceNodes(ctx, in, out)
}
