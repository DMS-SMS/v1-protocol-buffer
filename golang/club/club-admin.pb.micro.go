// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: club-admin.proto

package clubproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ClubAdmin service

type ClubAdminService interface {
	CreateNewClub(ctx context.Context, in *CreateNewClubRequest, opts ...client.CallOption) (*CreateNewClubResponse, error)
}

type clubAdminService struct {
	c    client.Client
	name string
}

func NewClubAdminService(name string, c client.Client) ClubAdminService {
	return &clubAdminService{
		c:    c,
		name: name,
	}
}

func (c *clubAdminService) CreateNewClub(ctx context.Context, in *CreateNewClubRequest, opts ...client.CallOption) (*CreateNewClubResponse, error) {
	req := c.c.NewRequest(c.name, "ClubAdmin.CreateNewClub", in)
	out := new(CreateNewClubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClubAdmin service

type ClubAdminHandler interface {
	CreateNewClub(context.Context, *CreateNewClubRequest, *CreateNewClubResponse) error
}

func RegisterClubAdminHandler(s server.Server, hdlr ClubAdminHandler, opts ...server.HandlerOption) error {
	type clubAdmin interface {
		CreateNewClub(ctx context.Context, in *CreateNewClubRequest, out *CreateNewClubResponse) error
	}
	type ClubAdmin struct {
		clubAdmin
	}
	h := &clubAdminHandler{hdlr}
	return s.Handle(s.NewHandler(&ClubAdmin{h}, opts...))
}

type clubAdminHandler struct {
	ClubAdminHandler
}

func (h *clubAdminHandler) CreateNewClub(ctx context.Context, in *CreateNewClubRequest, out *CreateNewClubResponse) error {
	return h.ClubAdminHandler.CreateNewClub(ctx, in, out)
}
